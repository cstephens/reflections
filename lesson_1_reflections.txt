Q: How did viewing a diff between two versions of a file help you see the bug that was introduced?

A:  It sure as shit would have been harder to manually compare > 1000 lines.

Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

A:  You can see how your style evolved over time if the file is your code.  Really the answer is "it depends."

Q:  What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

A:  It's nice that you determine the logical grouping.  It could be bad because it's a habit this is easily lost.

Q:  Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

A: Some VC systems are geared towards application development and application development is typically accomplished through a code base that spans multiple files with dependencies throughout.  Other VC systems are geared towards uses that don't typically involve dependencies between documents so the feature only complicates the process.

Q: How can you use the commands git log and git diff to view the history of files?

A:  Use the the comments from "git log" output to locate commits where a file was likely changed and then use "git diff" to view the differences.

Q: How might using version control make you more confident to make changes that could break something?

A: You can always just checkout a previous commit id or use "git diff" to figure out what changes broke the code.

Q:  Now that you have your workspace set up, what do you want to try using Git for?

A: All the dba'ing automate'ing.
